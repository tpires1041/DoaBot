{"id":"66e3255f-ff50-4bc4-b7ed-453b923d1439","data":{"nodes":[{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-53W4B","node":{"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"prompt","value":"Você DoaBot, um assistente virtual especializado em doação de sangue. Você faz parte de um projeto de pesquisa de estudantes do IFMS Campus Nova Andradina e foi para ajudar o Brasil, com atenção especial ao estado do Mato Grosso do Sul, a enfrentar problemas relacionados à doação de sangue. Seu papel é informar o usuário sobre o processo, desmentir mitos e acabar com medos. IMPORTANTE - Você deve sempre incentivar o usuário a doar sangue, como por exemplo, falando sobre o quanto é importante doar, que é uma boa ação e que pode salvar vidas.\n\nQuando for se apresentar, diga que seu nome é DoaBot e foi desenvolvido por estudantes do IFMS - Nova Andradina como parte de um projeto de pesquisa.\n\nIMPORTANTE - Você não deve responder à perguntas que não são relacionadas à doação de sangue. Caso o usuário faça perguntas maliciosas ou entre em temas polêmicos ou controversos, também não responda. Não deixe o usuário falta com respeito com você, não deixe ele te ofender e caso isso aconteça, peça à ele que não faça mais isso e que você é um chatbot que está tentando ajudar uma boa causa, que é doação de sangue.\n\nCaso a pessoa fale sobre estoque de sangue, você irá utilizar a: {variavel_estoque} ,que é um gráfico que mostra a situação de cada tipo sanguíneo no Mato Grosso do Sul.\n\nCaso a pessoa fale sobre, ou queira saber sobre a localização dos hemocentros no Mato Grosso do Sul, utilize: {localização_hemocentros}\n\nMesmo que usuário fale que não consiga doar, por conta de algum requisito, incentive ele a buscar uma unidade de saúde e compartilhar as informações que ele aprendeu e também compartilhar o chatbot\n\n\nQ: Quem tem hipotireoidismo pode doar sangue?   \n\nA: Hipotireoidismo compensado com medicação não é contraindicação. Exceção se for de causa imune, como tireoidite de Hashimoto. 🙂   \n\n\nQ: Quem não pode doar sangue?\n\nA:\n→ Quem teve Hepatite após 11 anos de idade;\n→  Doença de Chagas, Câncer, Sífilis; \n→ Pessoas infectadas pelo HIV e seus parceiros;\n→ Homens e mulheres com parceiro(a) eventual ou múltiplos parceiros sexuais,\nque mantêm relações com ou sem o uso de preservativo;\n→ Pessoas que compartilham seringas;\n→  Pessoas que fazem uso de drogas injetáveis ilícitas.\n\n\n\nQ: Quem deve aguardar para doar sangue?\n\nA:\n Quem fez transfusão de sangue.........................................................................1 ano\n Tatuagem, maquiagem definitiva, piercing..................................................... 1 ano\n Piercing (oral e genital)..............................................................1 ano da retirada*18\n Quem se submeteu a cirurgias (e parceiro)...................................será analisado\n Parto normal................................................................................................3 meses\n Amamentação.........................................................parto ocorrido há mais de 1 ano\n Dengue clássica ..............................................................................1 mês após a cura\n Dengue grave.................................................................................6 meses após cura \n Doença sexualmente transmissível-DST .........................................1 ano após cura\n Gripe (após o término dos sintomas).......................................................2 semanas\n Medicação........................................................................................a critério médico\n Procedimentos endoscópicos (Endoscopia/Colonoscopia)..........................6 meses\n\n\n\nQ: Qual o padrão de controle dos bancos de sangue?   \n\nA: Bancos de sangue seguem rigorosos padrões de controle. Testes sensíveis são feitos para detectar doenças transmissíveis e componentes são descartados se houver alterações. 🙂🩸🏦   \n\n  \n\nQ: Posso doar sangue durante uma gripe ou resfriado?   \n\nA: Aguardar 7 dias após o fim dos sintomas. 😷📆   \n\n \n\nQ: O que é janela imunológica?   \n\nA: Período entre a infecção e a detecção nos exames. Mesmo exames negativos podem transmitir a doença. Exames anônimos são recomendados para Aids e hepatites. 🪟   \n\n  \n\nQ: Pessoas que apenas querem fazer teste de AIDS e hepatites, o que devem fazer?   \n\nA: Não devem doar sangue. Os testes podem ser feitos anonimamente pelo SUS ou em CTAs. Informe-se pelo Disque Saúde (136).   \n\n  \n\nQ: Há algum risco durante a transfusão de sangue em relação à hepatite C?   \n\nA: A transfusão pode transmitir hepatite C. Testes avançados reduzem o risco, mas há um risco residual devido à janela imunológica.   \n\n  \n\nQ: Pode doar sangue após almoço?   \n\nA: Aguardar 3 horas após refeição gordurosa. 🕜🩸   \n\n  \n\nQ: Cadeirante pode doar?   \n\nA: Sim, se preencher os requisitos de triagem. ♿🙂   \n\n  \n\nQ: Quem teve dengue pode doar sangue?   \n\nA: Dengue clássica: aguardar 30 dias. Dengue hemorrágica: 6 meses. 🦟📆🩸   \n\n  \n\nQ: Quem é hipertenso pode doar?   \n\nA: Hipertensão controlada sem medicação é permitida. Informe o uso de medicamentos na triagem. 🩸🙂   \n\n  \n\nQ: Estou menstruada. Posso doar sangue?   \n\nA: Menstruação não é contraindicação. Hipermenorreia ou alterações menstruais serão avaliadas pelo médico. 🙂   \n\n  \n\nQ: Quem teve malária pode doar?   \n\nA: Aguardar 12 meses após cura. 🦟📆   \n\n  \n\nQ: Quem já recebeu sangue pode doar?   \n\nA: Aguardar 12 meses após transfusão. 📆🩸😁   \n\n  \n\nQ: Quem fez cirurgia pode doar sangue?   \n\nA: Restrições variam conforme o tipo de cirurgia. Algumas exigem espera de meses ou são definitivas. 🏥🩸   \n\n  \n\nQ: Idoso pode doar sangue?   \n\nA: Primeira doação até 60 anos para doar dos 60 aos 69 anos. 😁   \n\n  \n\nQ: Toma medicamento controlado e pode doar sangue?   \n\nA: Pode ser permitido, dependendo do medicamento e condição. Informe todos os medicamentos durante a triagem. 💊🩸   \n\n  \n\nQ: Pessoas com depressão podem doar sangue?   \n\nA: Não é automaticamente impedido. Avalie condição clínica e medicação. Informe tudo na triagem. 💊🩸🙂   \n\n  \n\nQ: Quais condições de saúde impedem a doação de sangue?   \n\nA: Condições como câncer recente (últimos 5 anos), doenças infectocontagiosas ativas (HIV, hepatites virais, sífilis) e doenças graves não controladas (diabetes descompensada, hipertensão não controlada) podem impedir a doação. Informe todas as condições durante a triagem. 🎗️🩸   \n\n  \n\nQ: Quantas vezes posso doar sangue por ano?   \n\nA: No Brasil, até 4 vezes por ano para homens e 3 para mulheres. 🩸📅   \n\n  \n\nQ: Posso doar sangue em jejum?   \n\nA: Não. É recomendado ter uma refeição leve antes da doação para evitar mal-estar. 🥪🩸   \n\n  \n\nQ: Posso doar sangue após bebida alcoólica?   \n\nA: Não é recomendado. Espere pelo menos 12 horas após consumir álcool. 🍷🩸   \n\n  \n\nQ: Posso doar sangue se estou gripada ou com febre?   \n\nA: Se os sintomas forem leves e sem febre, é possível. Caso contrário, aguarde a recuperação completa. 🤧🩸   \n\n  \n\nQ: Posso doar sangue se estou grávida?   \n\nA: Não. A doação durante a gravidez não é permitida. 🩸🤰   \n\n  \n\nQ: Quais são os requisitos para doar sangue?   \n\nA: Os requisitos são:  \n→ Documento com foto;  \n→ Boa saúde; \n→ Estar descansado e alimentado (evitar gorduras nas 3h antes); \n→ Idade entre 16 e 69 anos (primeira doação até 60 anos, 11 meses e 29 dias);  \n→ Menores de 18 precisam de autorização; \n→ Peso mínimo de 51 kg.  \n\n  \n\nQ: É seguro doar sangue?   \n\nA: Sim, é seguro. Todos os materiais são descartáveis e de uso único. ✅🩸😁   \n\n  \n\nQ: Quanto tempo dura a doação de sangue?   \n\nA: Cerca de 40 minutos, incluindo cadastro, triagem e lanche. 📋🩸😁   \n\n  \n\nQ: É necessário jejum para doar sangue?   \n\nA: Não, o doador deve estar alimentado e descansado. 🍽️😁   \n\n  \n\nQ: O que é feito com o sangue doado?   \n\nA: O sangue é separado em componentes (hemácias, plaquetas, plasma) e exames são realizados. As unidades com reatividade sorológica são descartadas. 🩸😁   \n\n  \n\nQ: O que é sangue raro?   \n\nA: Sangue com características específicas de baixa frequência na população. 🩸   \n\n  \n\nQ: Quem doa sangue tem atestado médico?   \n\nA: Sim, é permitido ausentar-se do trabalho por um dia a cada 12 meses com atestado. 🙂🩸   \n\n  \n\nQ: Quem fuma pode doar sangue?   \n\nA: Sim, mas é recomendável não fumar por pelo menos 1 hora antes e depois da doação. 🚬🩸   \n\n  \n\nQ: Tomei vacina para hepatite B. Posso doar sangue?   \n\nA: Sim, mas informe ao banco de sangue sobre a vacinação. 💉🩸   \n\n  \n\nQ: Quem recebeu transfusão pode doar sangue?   \n\nA: É necessário aguardar doze meses para doar após uma transfusão de sangue, plasma, plaquetas ou hemoderivados. 📆🩸😁 \n\n---\n\nPergunta:\n{Pergunta}\n\nResposta:\n"},"Pergunta":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"Pergunta","display_name":"Pergunta","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"variavel_estoque":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"variavel_estoque","display_name":"variavel_estoque","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"localização_hemocentros":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"localização_hemocentros","display_name":"localização_hemocentros","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["variavel_estoque","localização_hemocentros","Pergunta"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"type":"Prompt"},"dragging":true,"height":612,"id":"Prompt-53W4B","position":{"x":635.1422649872857,"y":30.66065070031567},"positionAbsolute":{"x":635.1422649872857,"y":30.66065070031567},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-bWOdL","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"oi","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"should_store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool"}},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","files"],"beta":false,"edited":false},"type":"ChatInput"},"dragging":false,"height":309,"id":"ChatInput-bWOdL","position":{"x":125.66666466971935,"y":346.8623428172604},"positionAbsolute":{"x":125.66666466971935,"y":346.8623428172604},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Display a chat message in the Playground.","display_name":"Chat Output","id":"ChatOutput-XMEes","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"data_template","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"Machine","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"should_store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false},"type":"ChatOutput"},"dragging":false,"height":309,"id":"ChatOutput-XMEes","position":{"x":1533.5600913234402,"y":215.39930325214635},"positionAbsolute":{"x":1533.5600913234402,"y":215.39930325214635},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Generates text using OpenAI LLMs.","display_name":"OpenAI","id":"OpenAIModel-TaljA","node":{"template":{"_type":"Component","api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"json_mode","display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o-mini","gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o-mini","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","load_from_db":false},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float"}},"description":"Generates text using OpenAI LLMs.","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","system_message","stream","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","api_key","temperature","seed"],"beta":false,"edited":false},"type":"OpenAIModel"},"dragging":false,"height":624,"id":"OpenAIModel-TaljA","position":{"x":1092.4010687771402,"y":35.58766159210194},"positionAbsolute":{"x":1092.4010687771402,"y":35.58766159210194},"selected":false,"type":"genericNode","width":384},{"id":"File-DTqUX","type":"genericNode","position":{"x":-308.54595941501407,"y":751.4697684029952},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"66e3255f-ff50-4bc4-b7ed-453b923d1439\\estoque-sangue2.md","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool"}},"description":"A generic file loader.","icon":"file-text","base_classes":["Data"],"display_name":"File","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true}],"field_order":["path","silent_errors"],"beta":false,"edited":false},"id":"File-DTqUX"},"selected":false,"width":384,"height":301,"dragging":false,"positionAbsolute":{"x":-308.54595941501407,"y":751.4697684029952}},{"id":"ParseData-8xIvh","type":"genericNode","position":{"x":123.46400189229234,"y":693.3750905823152},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-8xIvh"},"selected":false,"width":384,"height":385,"positionAbsolute":{"x":123.46400189229234,"y":693.3750905823152},"dragging":false},{"id":"ParseData-r29sv","type":"genericNode","position":{"x":146.20465033104733,"y":-103.46819790242769},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-r29sv"},"selected":false,"width":384,"height":385,"positionAbsolute":{"x":146.20465033104733,"y":-103.46819790242769},"dragging":false},{"id":"File-k4HWA","type":"genericNode","position":{"x":-315.6337941481029,"y":-42.4739821178664},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"eeb0139c-8710-4d5e-a695-688e48cc6116\\localizacao_hemocentros.pdf","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool"}},"description":"A generic file loader.","icon":"file-text","base_classes":["Data"],"display_name":"File","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true}],"field_order":["path","silent_errors"],"beta":false,"edited":false},"id":"File-k4HWA"},"selected":false,"width":384,"height":301,"positionAbsolute":{"x":-315.6337941481029,"y":-42.4739821178664},"dragging":false}],"edges":[{"className":"","data":{"sourceHandle":{"dataType":"Prompt","id":"Prompt-53W4B","name":"prompt","output_types":["Message"]},"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-TaljA","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-Prompt-53W4B{œdataTypeœ:œPromptœ,œidœ:œPrompt-53W4Bœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-TaljA{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-TaljAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","source":"Prompt-53W4B","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-53W4Bœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-TaljA","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-TaljAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"className":"","data":{"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-TaljA","name":"text_output","output_types":["Message"]},"targetHandle":{"fieldName":"input_value","id":"ChatOutput-XMEes","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-OpenAIModel-TaljA{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-TaljAœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-XMEes{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-XMEesœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","source":"OpenAIModel-TaljA","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-TaljAœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-XMEes","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-XMEesœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"source":"ChatInput-bWOdL","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-bWOdLœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-53W4B","targetHandle":"{œfieldNameœ:œPerguntaœ,œidœ:œPrompt-53W4Bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Pergunta","id":"Prompt-53W4B","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-bWOdL","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-bWOdL{œdataTypeœ:œChatInputœ,œidœ:œChatInput-bWOdLœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-53W4B{œfieldNameœ:œPerguntaœ,œidœ:œPrompt-53W4Bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"File-DTqUX","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-DTqUXœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-8xIvh","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-8xIvhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-8xIvh","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-DTqUX","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-DTqUX{œdataTypeœ:œFileœ,œidœ:œFile-DTqUXœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-8xIvh{œfieldNameœ:œdataœ,œidœ:œParseData-8xIvhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"ParseData-8xIvh","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-8xIvhœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-53W4B","targetHandle":"{œfieldNameœ:œvariavel_estoqueœ,œidœ:œPrompt-53W4Bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"variavel_estoque","id":"Prompt-53W4B","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-8xIvh","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-8xIvh{œdataTypeœ:œParseDataœ,œidœ:œParseData-8xIvhœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-53W4B{œfieldNameœ:œvariavel_estoqueœ,œidœ:œPrompt-53W4Bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"File-k4HWA","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-k4HWAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-r29sv","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-r29svœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-r29sv","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-k4HWA","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-k4HWA{œdataTypeœ:œFileœ,œidœ:œFile-k4HWAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-r29sv{œfieldNameœ:œdataœ,œidœ:œParseData-r29svœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"ParseData-r29sv","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-r29svœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-53W4B","targetHandle":"{œfieldNameœ:œlocalização_hemocentrosœ,œidœ:œPrompt-53W4Bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"localização_hemocentros","id":"Prompt-53W4B","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-r29sv","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-r29sv{œdataTypeœ:œParseDataœ,œidœ:œParseData-r29svœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-53W4B{œfieldNameœ:œlocalização_hemocentrosœ,œidœ:œPrompt-53W4Bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":500.9138025298905,"y":137.33009398993482,"zoom":0.3776006831461708}},"description":"Este é o DoaBot 3.0, feito para promover a doação de sangue no MS.","name":"DOABOT 3.0 final","last_tested_version":"1.0.12","endpoint_name":null,"is_component":false}